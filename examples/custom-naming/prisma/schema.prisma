//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator js {
  provider = "prisma-client-js"
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Customer {
  id                String   @id() @default(uuid())
  firstName         String
  lastName          String
  emailAddress      String   @unique()
  registrationDate  DateTime @default(now())
  loyaltyPoints     Int      @default(0)
  shippingAddress   Address? @relation("CustomerShipping", fields: [shippingAddressId], references: [id])
  shippingAddressId String?
  billingAddress    Address? @relation("CustomerBilling", fields: [billingAddressId], references: [id])
  billingAddressId  String?
  orders            Order[]
  phoneNumber       String?
}

model ProductItem {
  id            String      @id() @default(uuid())
  name          String
  description   String
  price         Decimal
  stockQuantity Int
  categories    Category[]
  orderItems    OrderItem[]
}

model Address {
  id               String     @id() @default(uuid())
  streetLine1      String
  streetLine2      String?
  city             String
  stateProvince    String
  postalCode       String
  country          String
  customerShipping Customer[] @relation("CustomerShipping")
  customerBilling  Customer[] @relation("CustomerBilling")
}

model Order {
  id                  String      @id() @default(uuid())
  orderDate           DateTime    @default(now())
  customer            Customer    @relation(fields: [customerId], references: [id])
  customerId          String
  orderStatus         OrderStatus
  orderItems          OrderItem[]
  totalAmount         Decimal
  paymentMethod       String
  specialInstructions String?
}

model OrderItem {
  id           String      @id() @default(uuid())
  order        Order       @relation(fields: [orderId], references: [id])
  orderId      String
  product      ProductItem @relation(fields: [productId], references: [id])
  productId    String
  quantity     Int
  unitPrice    Decimal
  itemDiscount Decimal     @default(0)
}

model Category {
  id             String        @id() @default(uuid())
  name           String
  description    String
  products       ProductItem[]
  parentCategory Category?     @relation("CategoryHierarchy", fields: [parentId], references: [id])
  parentId       String?
  subCategories  Category[]    @relation("CategoryHierarchy")
}
