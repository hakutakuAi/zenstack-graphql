"""An object with a unique identifier"""
interface Node {
  """The unique identifier for this object"""
  id: ID!
}

"""A date-time string at UTC, such as 2007-12-03T10:15:30Z"""
scalar DateTime

"""The `JSON` scalar type represents JSON values as specified by ECMA-404"""
scalar JSON

"""An arbitrary-precision Decimal type"""
scalar Decimal

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

type Customer {
  id: String!
  first_name: String!
  last_name: String!
  email_address: String!
  registration_date: DateTime!
  loyalty_points: Int!
  shipping_address: Address
  shipping_address_id: String
  billing_address: Address
  billing_address_id: String
  orders: [Order!]!
  contact_number: String

  """Relation to Address via customerShipping"""
  shippingAddress: Address

  """Relation to Address via customerShipping"""
  billingAddress: Address
}

type Product {
  id: String!
  name: String!
  description: String!
  price: Decimal!
  stock_quantity: Int!
  categories: [Category!]!
  order_items: [OrderItem!]!

  """Relation to OrderItem via product"""
  orderItems: [OrderItem!]!
}

"""Shipping or billing address information"""
type Address {
  id: String!
  street_line1: String!
  street_line2: String
  city: String!
  state_province: String!
  postal_code: String!
  country: String!
  customer_shipping: [Customer!]!
  customer_billing: [Customer!]!

  """Relation to Customer via shippingAddress"""
  customerShipping: [Customer!]!

  """Relation to Customer via shippingAddress"""
  customerBilling: [Customer!]!
}

type Order {
  id: String!
  order_date: DateTime!
  customer: Customer!
  customer_id: String!
  order_status: OrderStatus!
  order_items: [OrderItem!]!
  total_amount: Decimal!
  payment_method: String!

  """Special delivery instructions"""
  special_instructions: String

  """Relation to OrderItem via order"""
  orderItems: [OrderItem!]!
}

type OrderItem {
  id: String!
  order: Order!
  order_id: String!
  product: Product!
  product_id: String!
  quantity: Int!
  unit_price: Decimal!
  discount_amount: Decimal!
}

type Category {
  id: String!
  name: String!
  description: String!
  products: [Product!]!
  parent_category: Category
  parent_id: String
  sub_categories: [Category!]!

  """Relation to Category via parentCategory"""
  parentCategory: Category

  """Relation to Category via parentCategory"""
  subCategories: [Category!]!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""Pagination input for forward pagination"""
input ForwardPaginationInput {
  """Returns the first n elements from the list."""
  first: Int

  """Returns the elements in the list that come after the specified cursor."""
  after: String
}

"""Pagination input for backward pagination"""
input BackwardPaginationInput {
  """Returns the last n elements from the list."""
  last: Int

  """
  Returns the elements in the list that come before the specified cursor.
  """
  before: String
}

"""Combined pagination input"""
input PaginationInput {
  """Returns the first n elements from the list."""
  first: Int

  """Returns the elements in the list that come after the specified cursor."""
  after: String

  """Returns the last n elements from the list."""
  last: Int

  """
  Returns the elements in the list that come before the specified cursor.
  """
  before: String
}

"""An edge in a Customer connection."""
type CustomerEdge {
  """The Customer at the end of the edge."""
  node: Customer!

  """A cursor for use in pagination."""
  cursor: String!
}

"""A connection to a list of Customer items."""
type CustomerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of Customer edges."""
  edges: [CustomerEdge!]!

  """The total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a Product connection."""
type ProductEdge {
  """The Product at the end of the edge."""
  node: Product!

  """A cursor for use in pagination."""
  cursor: String!
}

"""A connection to a list of Product items."""
type ProductConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of Product edges."""
  edges: [ProductEdge!]!

  """The total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a Address connection."""
type AddressEdge {
  """The Address at the end of the edge."""
  node: Address!

  """A cursor for use in pagination."""
  cursor: String!
}

"""A connection to a list of Address items."""
type AddressConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of Address edges."""
  edges: [AddressEdge!]!

  """The total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a Order connection."""
type OrderEdge {
  """The Order at the end of the edge."""
  node: Order!

  """A cursor for use in pagination."""
  cursor: String!
}

"""A connection to a list of Order items."""
type OrderConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of Order edges."""
  edges: [OrderEdge!]!

  """The total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a OrderItem connection."""
type OrderItemEdge {
  """The OrderItem at the end of the edge."""
  node: OrderItem!

  """A cursor for use in pagination."""
  cursor: String!
}

"""A connection to a list of OrderItem items."""
type OrderItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of OrderItem edges."""
  edges: [OrderItemEdge!]!

  """The total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a Category connection."""
type CategoryEdge {
  """The Category at the end of the edge."""
  node: Category!

  """A cursor for use in pagination."""
  cursor: String!
}

"""A connection to a list of Category items."""
type CategoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of Category edges."""
  edges: [CategoryEdge!]!

  """The total count of items in the connection."""
  totalCount: Int!
}

"""Sort direction for ordering results"""
enum SortDirection {
  """Ascending order"""
  ASC

  """Descending order"""
  DESC
}

"""Sort input for Customer connections"""
input CustomerSortInput {
  """Placeholder field when no sortable fields are available"""
  _placeholder: String
}

"""Sort input for Product connections"""
input ProductSortInput {
  """Placeholder field when no sortable fields are available"""
  _placeholder: String
}

"""Sort input for Address connections"""
input AddressSortInput {
  """Placeholder field when no sortable fields are available"""
  _placeholder: String
}

"""Sort input for Order connections"""
input OrderSortInput {
  """Placeholder field when no sortable fields are available"""
  _placeholder: String
}

"""Sort input for OrderItem connections"""
input OrderItemSortInput {
  """Placeholder field when no sortable fields are available"""
  _placeholder: String
}

"""Sort input for Category connections"""
input CategorySortInput {
  """Placeholder field when no sortable fields are available"""
  _placeholder: String
}

"""Input type for numeric filtering operations"""
input NumericFilterInput {
  """Equal to the given value"""
  equals: Float

  """Not equal to the given value"""
  not: Float

  """Greater than the given value"""
  gt: Float

  """Less than the given value"""
  lt: Float
}

"""Input type for datetime filtering operations"""
input DateTimeFilterInput {
  """Equal to the given value"""
  equals: DateTime

  """Not equal to the given value"""
  not: DateTime

  """Greater than the given value"""
  gt: DateTime

  """Less than the given value"""
  lt: DateTime
}

"""Input type for string filtering operations"""
input StringFilterInput {
  """Equal to the given value"""
  equals: String

  """Not equal to the given value"""
  not: String

  """In the given list of values"""
  in: [String!]

  """Not in the given list of values"""
  notIn: [String!]

  """Contains the given value"""
  contains: String

  """Starts with the given value"""
  startsWith: String

  """Ends with the given value"""
  endsWith: String
}

"""Input type for boolean filtering operations"""
input BooleanFilterInput {
  """Equal to the given value"""
  equals: Boolean

  """Not equal to the given value"""
  not: Boolean
}