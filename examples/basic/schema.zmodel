datasource db {
    provider = 'postgresql'
    url = env('DATABASE_URL')
}

generator js {
    provider = 'prisma-client-js'
}

plugin graphql {
    provider = '../../dist'
    output = './schema.graphql'
	
}

enum SpaceUserRole {
    USER
    ADMIN
    GUEST
}


model Space {
    id        String      @id @default(uuid())
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    name      String      @length(4, 50)
    slug      String      @unique @regex('^[0-9a-zA-Z]{4,16}$')
    members   SpaceUser[]
    lists     List[]

    // require login
    @@deny('all', auth() == null)

    // everyone can create a space
    @@allow('create', true)

    // any user in the space can read the space
    @@allow('read', members?[user.id == auth().id])

    // space admin can update and delete
    @@allow('update,delete', members?[user.id == auth().id && role == ADMIN])
}


model SpaceUser {
    id        String        @id @default(uuid())
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt
    space     Space         @relation(fields: [spaceId], references: [id], onDelete: Cascade)
    spaceId   String
    user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    role      SpaceUserRole
    invitedBy String?

    @@unique([userId, spaceId])

    // require login
    @@deny('all', auth() == null)

    // space admin can create/update/delete
    @@allow('create,update,delete', space.members?[user.id == auth().id && role == ADMIN])

    // user can read entries for spaces which he's a member of
    @@allow('read', space.members?[user.id == auth().id])

}


model User {
    id            String      @id @default(uuid())
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    email         String      @unique @email
    emailVerified DateTime?
    password      String?     @password @omit
    name          String?
    spaces        SpaceUser[]
    image         String?     @url
    lists         List[]
    todos         Todo[]
    lastSeen      DateTime?
    preferences   Json?

    // can be created by anyone, even not logged in
    @@allow('create', true)

    // can be read by users sharing any space
    @@allow('read', spaces?[space.members?[user.id == auth().id]])

    // full access by oneself
    @@allow('all', auth().id == this.id)
	@@auth
}


model List {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    space     Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
    spaceId   String
    owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId   String
    title     String   @length(1, 100)
    private   Boolean  @default(false)
    todos     Todo[]
    color     String?

    // require login
    @@deny('all', auth() == null)

    // can be read by owner or space members (only if not private) 
    @@allow('read', owner.id == auth().id || (space.members?[user.id == auth().id] && !private))

    // when create, owner must be set to current user, and user must be in the space
    @@allow('create', owner.id == auth().id && space.members?[user.id == auth().id])

    // when create, owner must be set to current user, and user must be in the space
    // update is not allowed to change owner
    @@allow('update', owner.id == auth().id && space.members?[user.id == auth().id] && future().owner == owner)

    // can be deleted by owner
    @@allow('delete', owner.id == auth().id)
}


model Todo {
    id          String    @id @default(uuid())
    createdAt   DateTime  @default(now()) @graphql.sortable() @graphql.filterable()
    updatedAt   DateTime  @updatedAt
    owner       User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId     String
    list        List      @relation(fields: [listId], references: [id], onDelete: Cascade)
    listId      String
    title       String    @length(1, 100) @graphql.filterable()
    completedAt DateTime?
    description String?
    priority    Int       @default(0) @graphql.sortable() @graphql.filterable()
    dueDate     DateTime? @graphql.sortable()

    // require login
    @@deny('all', auth() == null)

    // owner has full access, also space members have full access (if the parent List is not private)
    @@allow('all', list.owner.id == auth().id)
    @@allow('all', list.space.members?[user.id == auth().id] && !list.private)

    // update cannot change owner
    @@deny('update', future().owner != owner)
}


model ActivityLog {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    userId    String
    action    String
    entityId  String
    entityType String
    metadata  Json?
}


model Tag {
    id        String   @id @default(uuid())
    name      String   @unique
    color     String?
}
