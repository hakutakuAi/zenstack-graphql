//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/// Types of reactions users can leave
enum ReactionType {
  LIKE
  LOVE
  HAHA
  WOW
  SAD
  ANGRY
}

enum UserRole {
  ADMIN
  MODERATOR
  USER
  GUEST
}

enum ContentFormat {
  TEXT
  MARKDOWN
  HTML
  RICHTEXT
}

model SystemConfig {
  id          String   @id() @default(uuid())
  key         String   @unique()
  value       String
  isEncrypted Boolean  @default(false)
  lastUpdated DateTime @default(now())
}

model User {
  id              String       @id() @default(uuid())
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt()
  username        String       @unique()
  email           String       @unique()
  fullName        String?
  bio             String?
  birthdate       DateTime?
  ipAddress       String?
  lastActive      DateTime?
  passwordHash    String?
  securityAnswers Json?
  posts           Post[]
  comments        Comment[]
  follows         Follow[]     @relation("UserFollows")
  followers       Follow[]     @relation("UserFollowers")
  likes           Like[]
  profile         UserProfile?
}

model UserProfile {
  id            String  @id() @default(uuid())
  userId        String  @unique()
  user          User    @relation(fields: [userId], references: [id])
  avatarUrl     String?
  coverImageUrl String?
  phoneNumber   String?
  location      String?
  karmaPoints   Int     @default(0)
  preferences   Json?
  websiteUrl    String?
}

model Post {
  id          String        @id() @default(uuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt()
  title       String
  content     String
  author      User          @relation(fields: [authorId], references: [id])
  authorId    String
  viewCount   Int           @default(0)
  isPublished Boolean       @default(true)
  comments    Comment[]
  likes       Like[]
  tags        TagsOnPosts[]
  latitude    Float?
  longitude   Float?
}

model Comment {
  id         String    @id() @default(uuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt()
  content    String
  author     User      @relation(fields: [authorId], references: [id])
  authorId   String
  post       Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String
  isApproved Boolean   @default(true)
  parentId   String?
  parent     Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies    Comment[] @relation("CommentReplies")
  likes      Like[]
}

model Like {
  id        String       @id() @default(uuid())
  createdAt DateTime     @default(now())
  user      User         @relation(fields: [userId], references: [id])
  userId    String
  post      Post?        @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String?
  comment   Comment?     @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String?
  type      ReactionType @default(LIKE)
}

model Follow {
  id          String   @id() @default(uuid())
  follower    User     @relation("UserFollows", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("UserFollowers", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())
  isActive    Boolean  @default(true)

  @@unique([followerId, followingId])
}

model Tag {
  id       String        @id() @default(uuid())
  name     String        @unique()
  color    String?
  posts    TagsOnPosts[]
  useCount Int           @default(0)
}

model TagsOnPosts {
  post    Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  String
  tag     Tag      @relation(fields: [tagId], references: [id])
  tagId   String
  addedAt DateTime @default(now())

  @@id([postId, tagId])
}
