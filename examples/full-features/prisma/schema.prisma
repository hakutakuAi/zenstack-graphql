//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator js {
  provider = "prisma-client-js"
}

/// Role levels for system users
enum UserRole {
  ADMIN
  USER
  GUEST
}

model InternalConfig {
  id        Int     @id() @default(autoincrement())
  key       String  @unique()
  value     String
  sensitive Boolean @default(true)
}

model Product {
  id          String     @id() @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt()
  name        String
  description String?
  price       Float
  inventory   Int        @default(0)
  categories  Category[]
  reviews     Review[]
  isActive    Boolean    @default(true)
}

model Category {
  id       String     @id() @default(uuid())
  name     String
  products Product[]
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  parentId String?
  children Category[] @relation("CategoryHierarchy")
}

model Review {
  id         String   @id() @default(uuid())
  createdAt  DateTime @default(now())
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  authorName String
  rating     Int
  comment    String?
  isVerified Boolean  @default(false)
}

model User {
  id      String   @id() @default(uuid())
  email   String   @unique()
  name    String?
  role    UserRole @default(USER)
  profile Profile?
  orders  Order[]
}

model Profile {
  id          String  @id() @default(uuid())
  userId      String  @unique()
  user        User    @relation(fields: [userId], references: [id])
  bio         String?
  avatarUrl   String?
  preferences Json?
}

model Order {
  id          String      @id() @default(uuid())
  createdAt   DateTime    @default(now())
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  status      String
  items       OrderItem[]
  totalAmount Float
}

model OrderItem {
  id        String @id() @default(uuid())
  order     Order  @relation(fields: [orderId], references: [id])
  orderId   String
  productId String
  quantity  Int
  price     Float
}
