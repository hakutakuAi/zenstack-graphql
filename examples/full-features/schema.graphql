"""An object with a unique identifier"""
interface Node {
  """The unique identifier for this object"""
  id: ID!
}

"""Essential scalar type: DateTime"""
scalar DateTime

"""Essential scalar type: JSON"""
scalar JSON

"""Essential scalar type: Decimal"""
scalar Decimal

enum ReactionType {
  LIKE
  LOVE
  HAHA
  WOW
  SAD
  ANGRY
}

enum UserRole {
  ADMIN
  MODERATOR
  USER
  GUEST
}

enum ContentFormat {
  TEXT
  MARKDOWN
  HTML
  RICHTEXT
}

"""Platform member with social interactions"""
type Member {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String!
  email: String!
  fullName: String
  bio: String
  birthdate: DateTime
  signupIpAddress: String

  """User's last activity timestamp"""
  lastActive: DateTime
  posts: [Post!]!
  comments: [Comment!]!
  follows: [Follow!]!
  followers: [Follow!]!
  likes: [Reaction!]!
  profile: UserProfile
}

type UserProfile {
  id: String!
  userId: String!
  user: Member!
  avatarUrl: String
  coverImageUrl: String
  phoneNumber: String
  location: String
  karmaPoints: Int!
  preferences: JSON

  """User's personal website"""
  personalSite: String
}

type Post {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  content: String!
  author: Member!
  authorId: String!
  viewCount: Int!
  isPublished: Boolean!
  comments: [Comment!]!
  likes: [Reaction!]!
  tags: [TagsOnPosts!]!
  latitude: Float
  longitude: Float
}

type Comment {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  content: String!
  author: Member!
  authorId: String!
  post: Post!
  postId: String!
  isApproved: Boolean!
  parentId: String
  parent: Comment
  replies: [Comment!]!
  likes: [Reaction!]!
}

type Reaction {
  id: String!
  createdAt: DateTime!
  user: Member!
  userId: String!
  post: Post
  postId: String
  comment: Comment
  commentId: String
  type: ReactionType!
}

type Follow {
  id: String!
  follower: Member!
  followerId: String!
  following: Member!
  followingId: String!
  createdAt: DateTime!
  isActive: Boolean!
}

type Tag {
  id: String!
  name: String!
  color: String
  posts: [TagsOnPosts!]!
  useCount: Int!
}

type TagsOnPosts {
  post: Post!
  postId: String!
  tag: Tag!
  tagId: String!
  addedAt: DateTime!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""Pagination input for forward pagination"""
input ForwardPaginationInput {
  """Returns the first n elements from the list."""
  first: Int

  """Returns the elements in the list that come after the specified cursor."""
  after: String
}

"""Pagination input for backward pagination"""
input BackwardPaginationInput {
  """Returns the last n elements from the list."""
  last: Int

  """
  Returns the elements in the list that come before the specified cursor.
  """
  before: String
}

"""Combined pagination input"""
input PaginationInput {
  """Returns the first n elements from the list."""
  first: Int

  """Returns the elements in the list that come after the specified cursor."""
  after: String

  """Returns the last n elements from the list."""
  last: Int

  """
  Returns the elements in the list that come before the specified cursor.
  """
  before: String
}

"""An edge in a Member connection."""
type MemberEdge {
  """The Member at the end of the edge."""
  node: Member!

  """A cursor for use in pagination."""
  cursor: String!
}

"""A connection to a list of Member items."""
type MemberConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of Member edges."""
  edges: [MemberEdge!]!

  """The total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a UserProfile connection."""
type UserProfileEdge {
  """The UserProfile at the end of the edge."""
  node: UserProfile!

  """A cursor for use in pagination."""
  cursor: String!
}

"""A connection to a list of UserProfile items."""
type UserProfileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of UserProfile edges."""
  edges: [UserProfileEdge!]!

  """The total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a Post connection."""
type PostEdge {
  """The Post at the end of the edge."""
  node: Post!

  """A cursor for use in pagination."""
  cursor: String!
}

"""A connection to a list of Post items."""
type PostConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of Post edges."""
  edges: [PostEdge!]!

  """The total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a Comment connection."""
type CommentEdge {
  """The Comment at the end of the edge."""
  node: Comment!

  """A cursor for use in pagination."""
  cursor: String!
}

"""A connection to a list of Comment items."""
type CommentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of Comment edges."""
  edges: [CommentEdge!]!

  """The total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a Reaction connection."""
type ReactionEdge {
  """The Reaction at the end of the edge."""
  node: Reaction!

  """A cursor for use in pagination."""
  cursor: String!
}

"""A connection to a list of Reaction items."""
type ReactionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of Reaction edges."""
  edges: [ReactionEdge!]!

  """The total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a Follow connection."""
type FollowEdge {
  """The Follow at the end of the edge."""
  node: Follow!

  """A cursor for use in pagination."""
  cursor: String!
}

"""A connection to a list of Follow items."""
type FollowConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of Follow edges."""
  edges: [FollowEdge!]!

  """The total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a Tag connection."""
type TagEdge {
  """The Tag at the end of the edge."""
  node: Tag!

  """A cursor for use in pagination."""
  cursor: String!
}

"""A connection to a list of Tag items."""
type TagConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of Tag edges."""
  edges: [TagEdge!]!

  """The total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a TagsOnPosts connection."""
type TagsOnPostsEdge {
  """The TagsOnPosts at the end of the edge."""
  node: TagsOnPosts!

  """A cursor for use in pagination."""
  cursor: String!
}

"""A connection to a list of TagsOnPosts items."""
type TagsOnPostsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of TagsOnPosts edges."""
  edges: [TagsOnPostsEdge!]!

  """The total count of items in the connection."""
  totalCount: Int!
}

"""Sort direction for ordering results"""
enum SortDirection {
  """Ascending order"""
  ASC

  """Descending order"""
  DESC
}

"""Sort input for MemberSortInput connections"""
input MemberSortInputSortInput {
  """Sort by createdAt"""
  createdAt: SortDirection

  """Sort by birthdate"""
  birthdate: SortDirection
}

"""Sort input for UserProfileSortInput connections"""
input UserProfileSortInputSortInput {
  """Sort by karmaPoints"""
  karmaPoints: SortDirection
}

"""Sort input for PostSortInput connections"""
input PostSortInputSortInput {
  """Sort by createdAt"""
  createdAt: SortDirection

  """Sort by viewCount"""
  viewCount: SortDirection

  """Sort by latitude"""
  latitude: SortDirection
}

"""Sort input for CommentSortInput connections"""
input CommentSortInputSortInput {
  """Sort by createdAt"""
  createdAt: SortDirection
}

"""Sort input for ReactionSortInput connections"""
input ReactionSortInputSortInput {
  """Sort by createdAt"""
  createdAt: SortDirection
}

"""Sort input for FollowSortInput connections"""
input FollowSortInputSortInput {
  """Sort by createdAt"""
  createdAt: SortDirection
}

"""Sort input for TagSortInput connections"""
input TagSortInputSortInput {
  """Sort by useCount"""
  useCount: SortDirection
}

"""Sort input for TagsOnPostsSortInput connections"""
input TagsOnPostsSortInputSortInput {
  """Placeholder field when no sortable fields are available"""
  _placeholder: SortDirection
}

"""Input type for numeric filtering operations"""
input NumericFilterInput {
  """Equal to the given value"""
  equals: Float

  """Not equal to the given value"""
  not: Float

  """Greater than the given value"""
  gt: Float

  """Less than the given value"""
  lt: Float
}

"""Input type for string filtering operations"""
input StringFilterInput {
  """Equal to the given value"""
  equals: String

  """Not equal to the given value"""
  not: String

  """In the given list of values"""
  in: [String!]

  """Not in the given list of values"""
  notIn: [String!]

  """Contains the given value"""
  contains: String

  """Starts with the given value"""
  startsWith: String

  """Ends with the given value"""
  endsWith: String
}

"""Input type for boolean filtering operations"""
input BooleanFilterInput {
  """Equal to the given value"""
  equals: Boolean

  """Not equal to the given value"""
  not: Boolean
}

"""Input type for datetime filtering operations"""
input DateTimeFilterInput {
  """Equal to the given value"""
  equals: DateTime

  """Not equal to the given value"""
  not: DateTime

  """Greater than the given value"""
  gt: DateTime

  """Less than the given value"""
  lt: DateTime
}

"""Filter input type for MemberFilterInput"""
input MemberFilterInputFilterInput {
  """Filter by username"""
  username: StringFilterInput

  """Filter by fullName"""
  fullName: StringFilterInput

  """Logical AND operation"""
  AND: [MemberFilterInputFilterInput!]

  """Logical OR operation"""
  OR: [MemberFilterInputFilterInput!]
}

"""Filter input type for UserProfileFilterInput"""
input UserProfileFilterInputFilterInput {
  """Filter by location"""
  location: StringFilterInput

  """Filter by karmaPoints"""
  karmaPoints: NumericFilterInput

  """Logical AND operation"""
  AND: [UserProfileFilterInputFilterInput!]

  """Logical OR operation"""
  OR: [UserProfileFilterInputFilterInput!]
}

"""Filter input type for PostFilterInput"""
input PostFilterInputFilterInput {
  """Filter by createdAt"""
  createdAt: DateTimeFilterInput

  """Filter by title"""
  title: StringFilterInput

  """Filter by isPublished"""
  isPublished: BooleanFilterInput

  """Logical AND operation"""
  AND: [PostFilterInputFilterInput!]

  """Logical OR operation"""
  OR: [PostFilterInputFilterInput!]
}

"""Filter input type for CommentFilterInput"""
input CommentFilterInputFilterInput {
  """Filter by isApproved"""
  isApproved: BooleanFilterInput

  """Logical AND operation"""
  AND: [CommentFilterInputFilterInput!]

  """Logical OR operation"""
  OR: [CommentFilterInputFilterInput!]
}

"""Filter input type for FollowFilterInput"""
input FollowFilterInputFilterInput {
  """Filter by isActive"""
  isActive: BooleanFilterInput

  """Logical AND operation"""
  AND: [FollowFilterInputFilterInput!]

  """Logical OR operation"""
  OR: [FollowFilterInputFilterInput!]
}

"""Filter input type for TagFilterInput"""
input TagFilterInputFilterInput {
  """Filter by name"""
  name: StringFilterInput

  """Logical AND operation"""
  AND: [TagFilterInputFilterInput!]

  """Logical OR operation"""
  OR: [TagFilterInputFilterInput!]
}

"""Query arguments for User with optional filter, sort, and pagination"""
input UserQueryArgs {
  """Number of items to return from the beginning"""
  first: Int

  """Cursor for pagination after this item"""
  after: String

  """Number of items to return from the end"""
  last: Int

  """Cursor for pagination before this item"""
  before: String

  """Return connection format with edges and pageInfo"""
  connection: Boolean
}

"""
Query arguments for UserProfile with optional filter, sort, and pagination
"""
input UserProfileQueryArgs {
  """Number of items to return from the beginning"""
  first: Int

  """Cursor for pagination after this item"""
  after: String

  """Number of items to return from the end"""
  last: Int

  """Cursor for pagination before this item"""
  before: String

  """Return connection format with edges and pageInfo"""
  connection: Boolean
}

"""Query arguments for Post with optional filter, sort, and pagination"""
input PostQueryArgs {
  """Number of items to return from the beginning"""
  first: Int

  """Cursor for pagination after this item"""
  after: String

  """Number of items to return from the end"""
  last: Int

  """Cursor for pagination before this item"""
  before: String

  """Return connection format with edges and pageInfo"""
  connection: Boolean
}

"""Query arguments for Comment with optional filter, sort, and pagination"""
input CommentQueryArgs {
  """Number of items to return from the beginning"""
  first: Int

  """Cursor for pagination after this item"""
  after: String

  """Number of items to return from the end"""
  last: Int

  """Cursor for pagination before this item"""
  before: String

  """Return connection format with edges and pageInfo"""
  connection: Boolean
}

"""Query arguments for Like with optional filter, sort, and pagination"""
input LikeQueryArgs {
  """Number of items to return from the beginning"""
  first: Int

  """Cursor for pagination after this item"""
  after: String

  """Number of items to return from the end"""
  last: Int

  """Cursor for pagination before this item"""
  before: String

  """Return connection format with edges and pageInfo"""
  connection: Boolean
}

"""Query arguments for Follow with optional filter, sort, and pagination"""
input FollowQueryArgs {
  """Number of items to return from the beginning"""
  first: Int

  """Cursor for pagination after this item"""
  after: String

  """Number of items to return from the end"""
  last: Int

  """Cursor for pagination before this item"""
  before: String

  """Return connection format with edges and pageInfo"""
  connection: Boolean
}

"""Query arguments for Tag with optional filter, sort, and pagination"""
input TagQueryArgs {
  """Number of items to return from the beginning"""
  first: Int

  """Cursor for pagination after this item"""
  after: String

  """Number of items to return from the end"""
  last: Int

  """Cursor for pagination before this item"""
  before: String

  """Return connection format with edges and pageInfo"""
  connection: Boolean
}

"""
Query arguments for TagsOnPosts with optional filter, sort, and pagination
"""
input TagsOnPostsQueryArgs {
  """Number of items to return from the beginning"""
  first: Int

  """Cursor for pagination after this item"""
  after: String

  """Number of items to return from the end"""
  last: Int

  """Cursor for pagination before this item"""
  before: String

  """Return connection format with edges and pageInfo"""
  connection: Boolean
}