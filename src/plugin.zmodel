/**
 * Ignore a model in GraphQL schema generation
 *
 * @example
 * model InternalEntity {
 *   id Int @id
 *   secretData String
 *
 *   @@graphql.ignore
 * }
 */
attribute @@graphql.ignore()

/**
 * Set custom name for a model in GraphQL schema
 *
 * @example
 * model User {
 *   id Int @id
 *
 *   @@graphql.name(name: "Member")
 * }
 */
attribute @@graphql.name(name: String)

/**
 * Set description for a model in GraphQL schema
 *
 * @example
 * model Post {
 *   id Int @id
 *
 *   @@graphql.description(description: "Blog post content")
 * }
 */
attribute @@graphql.description(description: String)

/**
 * Configure connection options for this model
 *
 * @example
 * model Post {
 *   id Int @id
 *
 *   @@graphql.connection(pageSize: 10)
 * }
 */
attribute @@graphql.connection(pageSize: Int?)

/// FIELD ATTRIBUTES

/**
 * Ignore a field in GraphQL schema generation
 *
 * @example
 * model User {
 *   id Int @id
 *   password String @graphql.ignore
 * }
 */
attribute @graphql.ignore()

/**
 * Set custom name for a field in GraphQL schema
 *
 * @example
 * model User {
 *   id Int @id
 *   emailAddress String @graphql.name(name: "email")
 * }
 */
attribute @graphql.name(name: String)

/**
 * Set description for a field in GraphQL schema
 *
 * @example
 * model User {
 *   id Int @id
 *   fullName String @graphql.description(description: "User's full name")
 * }
 */
attribute @graphql.description(description: String)

/**
 * Mark a field as sortable in connection queries
 * By default, fields are not sortable unless explicitly marked
 *
 * @example
 * model User {
 *   id Int @id
 *   score Float @graphql.sortable
 * }
 */
attribute @graphql.sortable()

/**
 * Mark a field as filterable in queries
 * By default, fields are not filterable unless explicitly marked
 *
 * @example
 * model User {
 *   id Int @id
 *   name String @graphql.filterable
 * }
 */
attribute @graphql.filterable()

